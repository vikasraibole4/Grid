import java.util.*;
public class Grid
{
	public static void main(String[] args)
	{
		int[][]grid=new int[100][100];
        Scanner sc = new Scanner(System.in);
      System.out.println("Please enter The same row and column upto 10: ");
      int M = sc.nextInt();
      int N = sc.nextInt();
		if(M!=N)
          {
              System.out.println("Please Enter same row and colum upto 10");
    
          }

          System.out.println("Please enter the number of "+ M*N +" cells for in the grid as 0 OR 1: ");
          for(int a = 0; a < M; a++)
          {
             for(int b = 0; b < N; b++)
             {
                grid[a][b] = sc.nextInt();
            
             }
          }

		// Displaying the grid
		System.out.println("Original Generation");
		for (int i = 0; i < M; i++)
		{
			for (int j = 0; j < N; j++)
			{
				System.out.println(grid[i][j]);
			}
			System.out.println();
		}
		System.out.println();
		nextGeneration(grid, M, N);
	}

	// Function to print next generation
	static void nextGeneration(int grid[][], int M, int N)
	{
		int[][] future = new int[M][N];

		// Loop through every cell
		for (int l = 1; l < M - 1; l++)
		{
			for (int m = 1; m < N - 1; m++)
			{
				// finding no Of Neighbours that are alive
				int aliveNeighbours = 0;
				for (int i = -1; i <= 1; i++)
					for (int j = -1; j <= 1; j++)
						aliveNeighbours += grid[l + i][m + j];

				// The cell needs to be subtracted from
				// its neighbours as it was counted before
				aliveNeighbours -= grid[l][m];

				// Implementing the Rules 

				// Cell is lonely and dies
				if ((grid[l][m] == 1) && (aliveNeighbours < 2))
					future[l][m] = 0;

				// Cell dies due to over population
				else if ((grid[l][m] == 1) && (aliveNeighbours > 3))
					future[l][m] = 0;

				// A new cell is born
				else if ((grid[l][m] == 0) && (aliveNeighbours == 3))
					future[l][m] = 1;

				// Remains the same
				else
					future[l][m] = grid[l][m];
			}
		}

		System.out.println("Next Generation");
		for (int i = 0; i < M; i++)
		{
			for (int j = 0; j < N; j++)
			{
				System.out.println(future[i][j]);
			}
			System.out.println();
		}
	}
}
